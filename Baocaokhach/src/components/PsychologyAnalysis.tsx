/**
 * Component ph√¢n t√≠ch t√¢m l√Ω kh√°ch h√†ng
 * Bao g·ªìm ch·ªçn kh√°ch h√†ng, ph√¢n t√≠ch t√¢m l√Ω, ƒëi·ªÉm m·∫°nh/y·∫øu, t√¨nh h√¨nh t√†i ch√≠nh
 */

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Textarea } from './ui/textarea';
import { Badge } from './ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { 
  Brain, 
  Heart, 
  Target, 
  AlertTriangle, 
  TrendingUp, 
  DollarSign,
  Users,
  Zap,
  Shield,
  Save,
  Eye,
  CheckCircle,
  User,
  FileText,
  MessageSquare,
  TrendingDown,
  Phone,
  Calendar,
  Sparkles,
  BarChart3
} from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { getValidSelectValue } from '../utils/selectFixer';

/**
 * Interface cho d·ªØ li·ªáu ph√¢n t√≠ch t√¢m l√Ω
 */
interface PsychologyData {
  customerId: string;
  personalityType: string;
  motivations: string;
  fears: string;
  strengths: string;
  weaknesses: string;
  approach: string;
  income: string;
  incomeSource: string;
  assets: string;
  debts: string;
  investmentCapacity: string;
  whatWeToldThem: string;
  analysisResult: string;
  recommendations: string;
  lastUpdated: string;
}

export default function PsychologyAnalysis() {
  const { currentUser } = useAuth();
  const [customers, setCustomers] = useState<any[]>([]);
  const [selectedCustomer, setSelectedCustomer] = useState<any>(null);
  const [psychologyData, setPsychologyData] = useState<PsychologyData>({
    customerId: '',
    personalityType: '',
    motivations: '',
    fears: '',
    strengths: '',
    weaknesses: '',
    approach: '',
    income: '',
    incomeSource: '',
    assets: '',
    debts: '',
    investmentCapacity: '',
    whatWeToldThem: '',
    analysisResult: '',
    recommendations: '',
    lastUpdated: ''
  });
  const [savedData, setSavedData] = useState<Record<string, PsychologyData>>({});
  const [isAnalyzing, setIsAnalyzing] = useState(false);

  /**
   * Load danh s√°ch kh√°ch h√†ng khi component mount
   */
  useEffect(() => {
    if (currentUser) {
      const customerData = localStorage.getItem(`customers_${currentUser.id}`);
      if (customerData) {
        setCustomers(JSON.parse(customerData));
      }
    }
  }, [currentUser]);

  /**
   * Load d·ªØ li·ªáu ph√¢n t√≠ch ƒë√£ l∆∞u
   */
  useEffect(() => {
    if (currentUser) {
      const saved = localStorage.getItem(`psychology_${currentUser.id}`);
      if (saved) {
        setSavedData(JSON.parse(saved));
      }
    }
  }, [currentUser]);

  /**
   * Load d·ªØ li·ªáu c·ªßa kh√°ch h√†ng ƒë∆∞·ª£c ch·ªçn
   */
  useEffect(() => {
    if (selectedCustomer) {
      const existingData = savedData[selectedCustomer.id];
      if (existingData) {
        setPsychologyData(existingData);
      } else {
        setPsychologyData({
          customerId: selectedCustomer.id,
          personalityType: '',
          motivations: '',
          fears: '',
          strengths: '',
          weaknesses: '',
          approach: '',
          income: '',
          incomeSource: '',
          assets: '',
          debts: '',
          investmentCapacity: '',
          whatWeToldThem: '',
          analysisResult: '',
          recommendations: '',
          lastUpdated: ''
        });
      }
    }
  }, [selectedCustomer, savedData]);

  /**
   * X·ª≠ l√Ω ch·ªçn kh√°ch h√†ng
   */
  const handleSelectCustomer = (customerId: string) => {
    const customer = customers.find(c => c.id === customerId);
    setSelectedCustomer(customer);
  };

  /**
   * C·∫≠p nh·∫≠t d·ªØ li·ªáu ph√¢n t√≠ch
   */
  const updateData = (field: keyof PsychologyData, value: string) => {
    setPsychologyData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  /**
   * L∆∞u d·ªØ li·ªáu ph√¢n t√≠ch
   */
  const saveAnalysis = () => {
    if (!selectedCustomer || !currentUser) return;

    const updatedData = {
      ...psychologyData,
      lastUpdated: new Date().toISOString()
    };

    const newSavedData = {
      ...savedData,
      [selectedCustomer.id]: updatedData
    };

    setSavedData(newSavedData);
    localStorage.setItem(`psychology_${currentUser.id}`, JSON.stringify(newSavedData));
    setPsychologyData(updatedData);

    // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
    alert('ƒê√£ l∆∞u ph√¢n t√≠ch th√†nh c√¥ng!');
  };

  /**
   * Ph√¢n t√≠ch t·ª± ƒë·ªông d·ª±a tr√™n d·ªØ li·ªáu c√≥ s·∫µn
   */
  const autoAnalyze = () => {
    if (!selectedCustomer || !currentUser) return;

    setIsAnalyzing(true);

    // L·∫•y d·ªØ li·ªáu 7 ng√†y t·ª´ localStorage
    const formData = localStorage.getItem('customerFormData');
    const summaryData = localStorage.getItem(`customerSummary_${selectedCustomer.id}`);
    
    let analysisResult = '';
    let recommendations = '';

    // Ph√¢n t√≠ch t·ª´ summary data
    if (summaryData) {
      const summary = JSON.parse(summaryData);
      
      analysisResult += `**üìä PH√ÇN T√çCH T√ÇM L√ù KH√ÅCH H√ÄNG: ${selectedCustomer.name}**\n\n`;
      
      if (summary.personalityType) {
        const personalityText = summary.personalityType === 'emotional' ? 'Ng∆∞·ªùi s·ªëng t√¨nh c·∫£m' :
                               summary.personalityType === 'practical' ? 'Ng∆∞·ªùi th·ª±c t·∫ø' : 'C√¢n b·∫±ng';
        analysisResult += `üß† **Lo·∫°i t√≠nh c√°ch:** ${personalityText}\n`;
        
        if (summary.personalityType === 'emotional') {
          recommendations += '‚Ä¢ S·ª≠ d·ª•ng c√¢u chuy·ªán c·∫£m ƒë·ªông, chia s·∫ª tr·∫£i nghi·ªám th·ª±c t·∫ø\n';
          recommendations += '‚Ä¢ Nh·∫•n m·∫°nh v·ªÅ gia ƒë√¨nh, t∆∞∆°ng lai con c√°i\n';
          recommendations += '‚Ä¢ T·∫°o k·∫øt n·ªëi c·∫£m x√∫c tr∆∞·ªõc khi b√†n v·ªÅ l·ª£i √≠ch\n';
        } else if (summary.personalityType === 'practical') {
          recommendations += '‚Ä¢ ƒê∆∞a ra s·ªë li·ªáu c·ª• th·ªÉ, b·∫±ng ch·ª©ng ROI r√µ r√†ng\n';
          recommendations += '‚Ä¢ So s√°nh v·ªõi c√°c k√™nh ƒë·∫ßu t∆∞ kh√°c\n';
          recommendations += '‚Ä¢ T·∫≠p trung v√†o l·ª£i √≠ch thi·∫øt th·ª±c\n';
        }
      }
      
      if (summary.dreams) {
        analysisResult += `üéØ **∆Ø·ªõc m∆°/ƒê·ªông l·ª±c:** ${summary.dreams}\n`;
        recommendations += '‚Ä¢ Li√™n k·∫øt s·∫£n ph·∫©m v·ªõi ∆∞·ªõc m∆° c·ªßa kh√°ch h√†ng\n';
      }
      
      if (summary.saddestPast) {
        analysisResult += `üòî **N·ªói ƒëau qu√° kh·ª©:** ${summary.saddestPast}\n`;
        recommendations += '‚Ä¢ Th·∫•u hi·ªÉu v√† chia s·∫ª c√πng c·∫£m x√∫c\n';
        recommendations += '‚Ä¢ ƒê∆∞a ra gi·∫£i ph√°p tr√°nh l·∫∑p l·∫°i sai l·∫ßm\n';
      }

      if (summary.strengths) {
        analysisResult += `üí™ **ƒêi·ªÉm m·∫°nh:** ${summary.strengths}\n`;
      }

      if (summary.weaknesses) {
        analysisResult += `‚ö†Ô∏è **ƒêi·ªÉm y·∫øu:** ${summary.weaknesses}\n`;
      }
    }

    // Ph√¢n t√≠ch t·ª´ form data 7 ng√†y
    if (formData) {
      const allFormData = JSON.parse(formData);
      const customerFormData = allFormData[selectedCustomer.id] || {};
      
      analysisResult += `\n**üìù PH√ÇN T√çCH T·ª™ QU√Å TR√åNH NURTURE 7 NG√ÄY:**\n\n`;

      // Ph√¢n t√≠ch thu nh·∫≠p t·ª´ ng√†y 2
      const day2Answers = Object.keys(customerFormData)
        .filter(key => key.startsWith('day_2_'))
        .map(key => customerFormData[key])
        .filter(answer => answer && answer.trim());

      if (day2Answers.length > 0) {
        analysisResult += `üí∞ **T√¨nh h√¨nh t√†i ch√≠nh:**\n`;
        day2Answers.forEach((answer, index) => {
          analysisResult += `- ${answer}\n`;
        });
        
        if (day2Answers.some(answer => answer.toLowerCase().includes('n·ª£'))) {
          analysisResult += `‚ö†Ô∏è **√Åp l·ª±c t√†i ch√≠nh:** C√≥ d·∫•u hi·ªáu n·ª£ n·∫ßn, c·∫ßn ti·∫øp c·∫≠n c·∫©n tr·ªçng\n`;
          recommendations += '‚Ä¢ ƒê·ªÅ xu·∫•t g√≥i ƒë·∫ßu t∆∞ nh·ªè, √≠t r·ªßi ro\n';
          recommendations += '‚Ä¢ Nh·∫•n m·∫°nh v·ªÅ t√≠nh ·ªïn ƒë·ªãnh v√† b·∫£o to√†n v·ªën\n';
        }
      }

      // Ph√¢n t√≠ch m·ªëi quan h·ªá t·ª´ ng√†y 6
      const day6Answers = Object.keys(customerFormData)
        .filter(key => key.startsWith('day_6_'))
        .map(key => customerFormData[key])
        .filter(answer => answer && answer.trim());

      if (day6Answers.length > 0) {
        analysisResult += `\nüíï **Quan ƒëi·ªÉm v·ªÅ t√¨nh y√™u & m·ªëi quan h·ªá:**\n`;
        if (day6Answers.some(answer => answer.toLowerCase().includes('ƒë·ªôc th√¢n'))) {
          analysisResult += `- Hi·ªán t·∫°i ƒë·ªôc th√¢n, c√≥ th·ªÉ t·∫≠p trung v√†o ph√°t tri·ªÉn b·∫£n th√¢n\n`;
          recommendations += '‚Ä¢ Nh·∫•n m·∫°nh v·ªÅ t·ª± do t√†i ch√≠nh v√† ƒë·ªôc l·∫≠p\n';
        }
      }

      // Ph√¢n t√≠ch d·ª± ƒë·ªãnh t∆∞∆°ng lai t·ª´ ng√†y 7
      const day7Answers = Object.keys(customerFormData)
        .filter(key => key.startsWith('day_7_'))
        .map(key => customerFormData[key])
        .filter(answer => answer && answer.trim());

      if (day7Answers.length > 0) {
        analysisResult += `\nüöÄ **D·ª± ƒë·ªãnh t∆∞∆°ng lai:**\n`;
        day7Answers.forEach((answer, index) => {
          if (answer.toLowerCase().includes('ƒë·∫ßu t∆∞')) {
            analysisResult += `- C√≥ √Ω ƒë·ªãnh ƒë·∫ßu t∆∞: ${answer}\n`;
            recommendations += '‚Ä¢ Kh√°ch h√†ng ƒë√£ s·∫µn s√†ng ƒë·∫ßu t∆∞, ti·∫øp c·∫≠n t√≠ch c·ª±c\n';
          }
        });
      }

      // T√≠nh m·ª©c ƒë·ªô t∆∞∆°ng t√°c
      const totalAnswers = Object.values(customerFormData).filter(answer => answer && answer.trim()).length;
      const totalQuestions = 7 * 9; // 7 ng√†y x 9 c√¢u h·ªèi
      const interactionRate = (totalAnswers / totalQuestions) * 100;

      analysisResult += `\nüìä **M·ª©c ƒë·ªô t∆∞∆°ng t√°c:** ${interactionRate.toFixed(1)}% (${totalAnswers}/${totalQuestions} c√¢u tr·∫£ l·ªùi)\n`;
      
      if (interactionRate > 70) {
        recommendations += '‚Ä¢ Kh√°ch h√†ng r·∫•t t√≠ch c·ª±c, c√≥ th·ªÉ closing s·ªõm\n';
      } else if (interactionRate > 40) {
        recommendations += '‚Ä¢ Kh√°ch h√†ng kh√° quan t√¢m, c·∫ßn nurture th√™m\n';
      } else {
        recommendations += '‚Ä¢ Kh√°ch h√†ng √≠t t∆∞∆°ng t√°c, c·∫ßn thay ƒë·ªïi chi·∫øn l∆∞·ª£c\n';
      }
    }

    // G·ª£i √Ω chi·∫øn l∆∞·ª£c t·ªïng th·ªÉ
    analysisResult += `\n**üéØ ƒê√ÅNH GI√Å T·ªîNG TH·ªÇ:**\n`;
    if (selectedCustomer.totalProgress > 80) {
      analysisResult += `- Ti·∫øn ƒë·ªô nurture r·∫•t t·ªët (${selectedCustomer.totalProgress.toFixed(1)}%)\n`;
      recommendations += '‚Ä¢ Kh√°ch h√†ng ƒë√£ s·∫µn s√†ng, n√™n ch·ªët sale trong v√†i ng√†y t·ªõi\n';
    } else if (selectedCustomer.totalProgress > 50) {
      analysisResult += `- Ti·∫øn ƒë·ªô nurture kh√° (${selectedCustomer.totalProgress.toFixed(1)}%)\n`;
      recommendations += '‚Ä¢ C·∫ßn nurture th√™m 1-2 tu·∫ßn n·ªØa\n';
    } else {
      analysisResult += `- Ti·∫øn ƒë·ªô nurture ch·∫≠m (${selectedCustomer.totalProgress.toFixed(1)}%)\n`;
      recommendations += '‚Ä¢ C·∫ßn xem x√©t l·∫°i chi·∫øn l∆∞·ª£c nurture\n';
    }

    // C·∫≠p nh·∫≠t state
    setPsychologyData(prev => ({
      ...prev,
      analysisResult,
      recommendations
    }));

    setIsAnalyzing(false);
    alert('ƒê√£ ph√¢n t√≠ch t·ª± ƒë·ªông th√†nh c√¥ng!');
  };

  /**
   * Ki·ªÉm tra kh√°ch h√†ng ƒë√£ ƒë∆∞·ª£c ph√¢n t√≠ch ch∆∞a
   */
  const isAnalyzed = (customerId: string) => {
    return savedData[customerId] && savedData[customerId].lastUpdated;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 p-3 sm:p-6">
      <div className="max-w-7xl mx-auto space-y-4 sm:space-y-6">
        {/* Header */}
        <Card className="border-0 shadow-xl bg-white/80 backdrop-blur-sm">
          <CardHeader>
            <CardTitle className="flex items-center gap-3 text-xl sm:text-2xl font-bold text-gray-800">
              <div className="w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-br from-purple-500 to-pink-600 rounded-xl flex items-center justify-center">
                <Brain className="w-4 h-4 sm:w-5 sm:h-5 text-white" />
              </div>
              Ph√¢n T√≠ch T√¢m L√Ω Kh√°ch H√†ng
            </CardTitle>
            <p className="text-sm text-gray-600">Ph√¢n t√≠ch t√¢m l√Ω, ƒëi·ªÉm m·∫°nh, ƒëi·ªÉm y·∫øu v√† t√¨nh h√¨nh t√†i ch√≠nh c·ªßa kh√°ch h√†ng</p>
          </CardHeader>
        </Card>

        {/* 1Ô∏è‚É£ Ph·∫ßn Ch·ªçn Kh√°ch H√†ng */}
        <Card className="border-0 shadow-xl bg-white/80 backdrop-blur-sm">
          <CardHeader>
            <CardTitle className="flex items-center gap-3 text-lg">
              <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-cyan-600 rounded-xl flex items-center justify-center">
                <Users className="w-4 h-4 text-white" />
              </div>
              1Ô∏è‚É£ Ch·ªçn Kh√°ch H√†ng ƒê·ªÉ Ph√¢n T√≠ch
            </CardTitle>
          </CardHeader>
          <CardContent>
            <Select onValueChange={handleSelectCustomer}>
              <SelectTrigger className="h-12 bg-gray-50/50 border-0 focus:bg-white transition-colors">
                <SelectValue placeholder="-- Ch·ªçn kh√°ch h√†ng c·∫ßn ph√¢n t√≠ch --" />
              </SelectTrigger>
              <SelectContent>
                {customers.map((customer) => (
                  <SelectItem key={customer.id} value={customer.id}>
                    <div className="flex items-center justify-between w-full">
                      <div className="flex items-center gap-3">
                        <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center text-white font-bold text-sm">
                          {customer.name.charAt(0).toUpperCase()}
                        </div>
                        <div>
                          <div className="font-medium">{customer.name}</div>
                          <div className="text-xs text-gray-500 flex items-center gap-2">
                            <Phone className="w-3 h-3" />
                            {customer.phone}
                            <Calendar className="w-3 h-3 ml-2" />
                            Ng√†y {customer.currentDay || 0}/7
                          </div>
                        </div>
                      </div>
                      {isAnalyzed(customer.id) && (
                        <CheckCircle className="w-5 h-5 text-green-500 flex-shrink-0" />
                      )}
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            {selectedCustomer && (
              <div className="mt-4 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl border border-blue-200">
                <div className="flex items-center gap-3">
                  <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold">
                    {selectedCustomer.name.charAt(0).toUpperCase()}
                  </div>
                  <div>
                    <h3 className="font-bold text-blue-900">{selectedCustomer.name}</h3>
                    <div className="flex items-center gap-4 text-sm text-blue-700">
                      <span className="flex items-center gap-1">
                        <Phone className="w-3 h-3" />
                        {selectedCustomer.phone}
                      </span>
                      <span className="flex items-center gap-1">
                        <Calendar className="w-3 h-3" />
                        Ng√†y {selectedCustomer.currentDay || 0}/7
                      </span>
                      <Badge className="bg-blue-100 text-blue-800">
                        {selectedCustomer.totalProgress.toFixed(0)}% ho√†n th√†nh
                      </Badge>
                    </div>
                    {isAnalyzed(selectedCustomer.id) && (
                      <Badge className="bg-green-100 text-green-800 mt-1">
                        <CheckCircle className="w-3 h-3 mr-1" />
                        ƒê√£ ƒë∆∞·ª£c ph√¢n t√≠ch
                      </Badge>
                    )}
                  </div>
                </div>
              </div>
            )}
          </CardContent>
        </Card>

        {selectedCustomer && (
          <>
            {/* 2Ô∏è‚É£ C√°c M·ª•c Ph√¢n T√≠ch T√¢m L√Ω */}
            <Card className="border-0 shadow-xl bg-white/80 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center gap-3 text-lg">
                  <div className="w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-600 rounded-xl flex items-center justify-center">
                    <Heart className="w-4 h-4 text-white" />
                  </div>
                  2Ô∏è‚É£ Ph√¢n T√≠ch T√¢m L√Ω
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                  <div className="space-y-3">
                    <label className="text-sm font-bold text-gray-700 flex items-center gap-2">
                      <User className="w-4 h-4 text-purple-600" />
                      Lo·∫°i t√≠nh c√°ch:
                    </label>
                    <Select value={getValidSelectValue(psychologyData.personalityType, '')} onValueChange={(value) => updateData('personalityType', value)}>
                      <SelectTrigger className="h-10 bg-gray-50/50 border-0 focus:bg-white">
                        <SelectValue placeholder="Ch·ªçn lo·∫°i t√≠nh c√°ch" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="emotional">üíñ Ng∆∞·ªùi s·ªëng t√¨nh c·∫£m</SelectItem>
                        <SelectItem value="practical">üéØ Ng∆∞·ªùi th·ª±c t·∫ø</SelectItem>
                        <SelectItem value="mixed">‚öñÔ∏è C√¢n b·∫±ng</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="space-y-3">
                    <label className="text-sm font-bold text-gray-700 flex items-center gap-2">
                      <Target className="w-4 h-4 text-green-600" />
                      ƒê·ªông l·ª±c ch√≠nh:
                    </label>
                    <Textarea 
                      placeholder="VD: Mu·ªën c√≥ ti·ªÅn mua nh√†, lo cho gia ƒë√¨nh..."
                      value={psychologyData.motivations}
                      onChange={(e) => updateData('motivations', e.target.value)}
                      className="h-20 bg-gray-50/50 border-0 focus:bg-white resize-none"
                    />
                  </div>
                  
                  <div className="space-y-3">
                    <label className="text-sm font-bold text-gray-700 flex items-center gap-2">
                      <AlertTriangle className="w-4 h-4 text-red-600" />
                      N·ªói s·ª£/Lo l·∫Øng:
                    </label>
                    <Textarea 
                      placeholder="VD: S·ª£ m·∫•t ti·ªÅn, s·ª£ b·ªã l·ª´a..."
                      value={psychologyData.fears}
                      onChange={(e) => updateData('fears', e.target.value)}
                      className="h-20 bg-gray-50/50 border-0 focus:bg-white resize-none"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* 3Ô∏è‚É£ Ph√¢n T√≠ch ƒêi·ªÉm Y·∫øu & ƒêi·ªÉm M·∫°nh */}
            <Card className="border-0 shadow-xl bg-white/80 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center gap-3 text-lg">
                  <div className="w-8 h-8 bg-gradient-to-br from-green-500 to-emerald-600 rounded-xl flex items-center justify-center">
                    <TrendingUp className="w-4 h-4 text-white" />
                  </div>
                  3Ô∏è‚É£ Ph√¢n T√≠ch ƒêi·ªÉm M·∫°nh & ƒêi·ªÉm Y·∫øu
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  <div className="space-y-3">
                    <label className="text-sm font-bold text-green-700 flex items-center gap-2">
                      <Shield className="w-4 h-4" />
                      ƒêi·ªÉm m·∫°nh c·ªßa kh√°ch:
                    </label>
                    <Textarea 
                      placeholder="VD: C√≥ kinh nghi·ªám ƒë·∫ßu t∆∞, th√¥ng minh, c√≥ network..."
                      value={psychologyData.strengths}
                      onChange={(e) => updateData('strengths', e.target.value)}
                      className="h-24 bg-gray-50/50 border-0 focus:bg-white resize-none"
                    />
                  </div>
                  
                  <div className="space-y-3">
                    <label className="text-sm font-bold text-red-700 flex items-center gap-2">
                      <Zap className="w-4 h-4" />
                      ƒêi·ªÉm y·∫øu c√≥ th·ªÉ khai th√°c:
                    </label>
                    <Textarea 
                      placeholder="VD: D·ªÖ tin ng∆∞·ªùi, √≠t hi·ªÉu bi·∫øt c√¥ng ngh·ªá, v·ªôi v√†ng..."
                      value={psychologyData.weaknesses}
                      onChange={(e) => updateData('weaknesses', e.target.value)}
                      className="h-24 bg-gray-50/50 border-0 focus:bg-white resize-none"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* 4Ô∏è‚É£ T√¨nh H√¨nh Kinh T·∫ø & T√†i Ch√≠nh */}
            <Card className="border-0 shadow-xl bg-white/80 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center gap-3 text-lg">
                  <div className="w-8 h-8 bg-gradient-to-br from-yellow-500 to-orange-600 rounded-xl flex items-center justify-center">
                    <DollarSign className="w-4 h-4 text-white" />
                  </div>
                  4Ô∏è‚É£ T√¨nh H√¨nh Kinh T·∫ø & T√†i Ch√≠nh
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-3">
                    <label className="text-sm font-bold text-gray-700">Thu nh·∫≠p ∆∞·ªõc t√≠nh:</label>
                    <Input 
                      placeholder="VD: 15-20 tri·ªáu/th√°ng"
                      value={psychologyData.income}
                      onChange={(e) => updateData('income', e.target.value)}
                      className="h-10 bg-gray-50/50 border-0 focus:bg-white"
                    />
                  </div>
                  
                  <div className="space-y-3">
                    <label className="text-sm font-bold text-gray-700">Ngu·ªìn thu nh·∫≠p:</label>
                    <Input 
                      placeholder="VD: Kinh doanh, l∆∞∆°ng c√¥ng ty, ƒë·∫ßu t∆∞..."
                      value={psychologyData.incomeSource}
                      onChange={(e) => updateData('incomeSource', e.target.value)}
                      className="h-10 bg-gray-50/50 border-0 focus:bg-white"
                    />
                  </div>
                  
                  <div className="space-y-3">
                    <label className="text-sm font-bold text-gray-700">T√†i s·∫£n hi·ªán c√≥:</label>
                    <Textarea 
                      placeholder="VD: Nh√† 3 t·ª∑, xe 800tr, ti·∫øt ki·ªám 500tr..."
                      value={psychologyData.assets}
                      onChange={(e) => updateData('assets', e.target.value)}
                      className="h-20 bg-gray-50/50 border-0 focus:bg-white resize-none"
                    />
                  </div>
                  
                  <div className="space-y-3">
                    <label className="text-sm font-bold text-gray-700">N·ª£/Cam k·∫øt t√†i ch√≠nh:</label>
                    <Textarea 
                      placeholder="VD: Vay ng√¢n h√†ng 500tr, n·ª£ th·∫ª t√≠n d·ª•ng 50tr..."
                      value={psychologyData.debts}
                      onChange={(e) => updateData('debts', e.target.value)}
                      className="h-20 bg-gray-50/50 border-0 focus:bg-white resize-none"
                    />
                  </div>
                </div>
                
                <div className="space-y-3">
                  <label className="text-sm font-bold text-gray-700">Kh·∫£ nƒÉng ƒë·∫ßu t∆∞ ∆∞·ªõc t√≠nh:</label>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                    {['D∆∞·ªõi 50 tri·ªáu', '50-200 tri·ªáu', '200-500 tri·ªáu', 'Tr√™n 500 tri·ªáu'].map(range => (
                      <Button
                        key={range}
                        variant={psychologyData.investmentCapacity === range ? "default" : "outline"}
                        size="sm"
                        onClick={() => updateData('investmentCapacity', range)}
                        className="text-xs h-9"
                      >
                        {range}
                      </Button>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* 5Ô∏è‚É£ M√¨nh ƒë√£ n√≥i v√† chia s·∫ª g√¨ v·ªõi kh√°ch */}
            <Card className="border-0 shadow-xl bg-white/80 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center gap-3 text-lg">
                  <div className="w-8 h-8 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-xl flex items-center justify-center">
                    <MessageSquare className="w-4 h-4 text-white" />
                  </div>
                  5Ô∏è‚É£ M√¨nh ƒê√£ N√≥i & Chia S·∫ª G√¨ V·ªõi Kh√°ch
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <label className="text-sm font-bold text-gray-700">
                    Nh·ªØng th√¥ng tin, c√¢u chuy·ªán, kinh nghi·ªám ƒë√£ chia s·∫ª:
                  </label>
                  <Textarea 
                    placeholder="VD: ƒê√£ k·ªÉ v·ªÅ case study th√†nh c√¥ng c·ªßa kh√°ch h√†ng kh√°c, chia s·∫ª v·ªÅ xu h∆∞·ªõng th·ªã tr∆∞·ªùng, gi·∫£i th√≠ch v·ªÅ r·ªßi ro v√† c∆° h·ªôi..."
                    value={psychologyData.whatWeToldThem}
                    onChange={(e) => updateData('whatWeToldThem', e.target.value)}
                    className="min-h-[120px] bg-gray-50/50 border-0 focus:bg-white resize-none"
                    rows={6}
                  />
                </div>
              </CardContent>
            </Card>

            {/* Action Buttons */}
            <Card className="border-0 shadow-xl bg-white/80 backdrop-blur-sm">
              <CardContent className="pt-6">
                <div className="flex flex-col sm:flex-row gap-3">
                  <Button 
                    onClick={saveAnalysis} 
                    className="flex-1 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 h-12"
                  >
                    <Save className="w-4 h-4 mr-2" />
                    L∆∞u Ph√¢n T√≠ch
                  </Button>
                  
                  <Button 
                    variant="outline" 
                    onClick={autoAnalyze} 
                    disabled={isAnalyzing}
                    className="flex-1 h-12 hover:bg-purple-50"
                  >
                    {isAnalyzing ? (
                      <>
                        <div className="w-4 h-4 mr-2 border-2 border-purple-600 border-t-transparent rounded-full animate-spin" />
                        ƒêang ph√¢n t√≠ch...
                      </>
                    ) : (
                      <>
                        <Sparkles className="w-4 h-4 mr-2" />
                        Ph√¢n T√≠ch T·ª± ƒê·ªông
                      </>
                    )}
                  </Button>
                  
                  {psychologyData.lastUpdated && (
                    <div className="flex items-center text-xs text-gray-500 px-3 justify-center sm:justify-start">
                      <Calendar className="w-3 h-3 mr-1" />
                      C·∫≠p nh·∫≠t: {new Date(psychologyData.lastUpdated).toLocaleString('vi-VN')}
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* 6Ô∏è‚É£ K·∫øt Qu·∫£ Ph√¢n T√≠ch */}
            {(psychologyData.analysisResult || psychologyData.recommendations) && (
              <Card className="border-0 shadow-xl bg-white/80 backdrop-blur-sm">
                <CardHeader>
                  <CardTitle className="flex items-center gap-3 text-lg">
                    <div className="w-8 h-8 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-xl flex items-center justify-center">
                      <FileText className="w-4 h-4 text-white" />
                    </div>
                    6Ô∏è‚É£ K·∫øt Qu·∫£ Ph√¢n T√≠ch & H∆∞·ªõng D·∫´n
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-6">
                    {/* K·∫øt qu·∫£ ph√¢n t√≠ch */}
                    {psychologyData.analysisResult && (
                      <div className="space-y-3">
                        <h4 className="font-bold text-lg flex items-center gap-2">
                          <BarChart3 className="w-5 h-5 text-indigo-600" />
                          B√°o C√°o Ph√¢n T√≠ch Chi Ti·∫øt
                        </h4>
                        <div className="bg-gradient-to-r from-indigo-50 to-purple-50 p-6 rounded-xl border border-indigo-200">
                          <pre className="whitespace-pre-wrap text-sm leading-relaxed text-gray-800 font-mono">
                            {psychologyData.analysisResult}
                          </pre>
                        </div>
                      </div>
                    )}

                    {/* Khuy·∫øn ngh·ªã h√†nh ƒë·ªông */}
                    {psychologyData.recommendations && (
                      <div className="space-y-3">
                        <h4 className="font-bold text-lg flex items-center gap-2">
                          <Target className="w-5 h-5 text-green-600" />
                          Khuy·∫øn Ngh·ªã H√†nh ƒê·ªông
                        </h4>
                        <div className="bg-gradient-to-r from-green-50 to-emerald-50 p-6 rounded-xl border border-green-200">
                          <pre className="whitespace-pre-wrap text-sm leading-relaxed text-gray-800">
                            {psychologyData.recommendations}
                          </pre>
                        </div>
                      </div>
                    )}

                    {/* Th·ªëng k√™ t·ªïng quan */}
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 pt-4 border-t">
                      <div className="text-center p-4 bg-blue-50 rounded-lg">
                        <div className="text-2xl font-bold text-blue-600">{selectedCustomer.totalProgress.toFixed(0)}%</div>
                        <div className="text-sm text-blue-700">Ti·∫øn ƒë·ªô nurture</div>
                      </div>
                      <div className="text-center p-4 bg-green-50 rounded-lg">
                        <div className="text-2xl font-bold text-green-600">
                          {selectedCustomer.currentDay || 0}/7
                        </div>
                        <div className="text-sm text-green-700">Ng√†y hi·ªán t·∫°i</div>
                      </div>
                      <div className="text-center p-4 bg-purple-50 rounded-lg">
                        <div className="text-2xl font-bold text-purple-600">
                          {selectedCustomer.completedDays?.length || 0}
                        </div>
                        <div className="text-sm text-purple-700">Ng√†y ho√†n th√†nh</div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}
          </>
        )}

        {/* No Customer Selected State */}
        {!selectedCustomer && (
          <Card className="border-0 shadow-xl bg-white/80 backdrop-blur-sm">
            <CardContent className="text-center py-16">
              <div className="relative">
                <Brain className="w-24 h-24 text-gray-300 mx-auto mb-6" />
                <div className="absolute top-0 left-1/2 transform -translate-x-1/2 w-32 h-32 bg-gradient-to-r from-purple-400 to-pink-400 rounded-full opacity-10 blur-2xl"></div>
              </div>
              <h3 className="text-2xl font-bold text-gray-800 mb-3">
                Ch·ªçn Kh√°ch H√†ng ƒê·ªÉ B·∫Øt ƒê·∫ßu Ph√¢n T√≠ch
              </h3>
              <p className="text-gray-500 max-w-md mx-auto">
                Vui l√≤ng ch·ªçn kh√°ch h√†ng t·ª´ dropdown ·ªü tr√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh ph√¢n t√≠ch t√¢m l√Ω
              </p>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
